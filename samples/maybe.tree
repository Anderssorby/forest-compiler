data Maybe a
  = Just a
  | Nothing

foo :: Int -> Maybe Int
foo n =
  case n of
    5 -> Just 10
    n -> Nothing

main :: Maybe Int
main = foo 5

map :: (a -> b) -> Maybe a -> Maybe b
map f m =
  case m of
    Just n -> Just (f n)
    Nothing -> Nothing

withDefault :: a -> Maybe a -> a
withDefault d m =
  case m of
    Just a -> a
    Nothing -> d

test :: Maybe Int
test =
  let
    addOne :: Int -> Int
    addOne n = n + 1
  in
    map addOne (Just 1)

test2 :: Maybe Int -> Int
test2 m = withDefault 5 m

test3 :: Int
test3 = test2 (Just 10)
