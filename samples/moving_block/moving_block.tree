data Vector2
  = Vector2 Float Float

data State
  = State Vector2 Vector2

data Input
  = Up
  | Down
  | Left
  | Right
  | NoInput

getX :: Vector2 -> Float
getX (Vector2 x y) = x

getY :: Vector2 -> Float
getY (Vector2 x y) = y

update :: State -> Input -> State
update (State (Vector2 x y) (Vector2 vx vy)) input =
  let
    accel :: Float
    accel = 0.1

    newVelocity :: Int -> Vector2
    newVelocity i =
      case input of
        Up ->
          Vector2 vx (vy - accel)
        Down ->
          Vector2 vx (vy + accel)
        Left ->
          Vector2 (vx - accel) vy
        Right ->
          Vector2 (vx + accel) vy
        NoInput ->
          Vector2 vx vy

    newPosition :: Int -> Vector2
    newPosition i = Vector2 (x + getX (newVelocity 0)) (y + getY (newVelocity 0))
  in
    State (newPosition 0) (newVelocity 0)

init :: State
init = State (Vector2 50.0 50.0) (Vector2 0.0 0.0)
